@using Microsoft.AspNetCore.Identity
@using AuthSystem.Areas.Identity.Data
@model List<AuthSystem.Models.TestApplication>
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject AuthSystem.Data.AuthDbContext _test;
@{
    ViewData["Title"] = "Dashboard";
    int totalTests = _test.Tests.Count();
    int totalTestCenters = _test.TestCenters.Count();
    List<ApplicationUser> totalUsers = UserManager.Users.OrderBy(q => q.Id).ToList();
    int totalApplicantsCount = totalUsers.Where(user => !UserManager.GetRolesAsync(user).Result.Any()).Count();
    List<ApplicationUser> totalApplicants = totalUsers.Where(user => !UserManager.GetRolesAsync(user).Result.Any()).ToList();
}
<div class="p-4 sm:ml-64 mt-10">
    <div class="p-4 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700">
        <div class="bg-gray-100 p-6 shadow-lg rounded-lg">
            <h1 class="mb-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white">Upcoming events</h1>
            <div id="calendar" class="p-4"></div>
        </div>
        <div class="mt-5 gap-5 flex flex-wrap">
            <div class="w-full sm:w-1/2 md:w-1/2 lg:w-1/3 xl:w-1/4 2xl:w-[32%] p-2">
                <div class="rounded-xl bg-[#39CCCC] text-white border hover:shadow-md">
                    <div class="flex justify-around items-center gap-2 text-white text-2xl font-bold mt-5">

                        <p>Total Tests</p>
                    </div>
                    <div class="p-5 ">
                        <div class="my-3 p-3 items-center flex justify-center h-28">
                            <h3 class="text-3xl font-bold text-white dark:text-white">@totalTests</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="w-full sm:w-1/2 md:w-1/2 lg:w-1/3 xl:w-1/4 2xl:w-[32%] p-2">
                <div class="rounded-xl bg-[#39CCCC] text-white border hover:shadow-md">
                    <div class="flex justify-around items-center gap-2 text-white text-2xl font-bold mt-5">

                        <p>Total TestCenters</p>
                    </div>
                    <div class="p-5">
                        <div class="my-3 p-3 items-center flex justify-center h-28">
                            <h3 class="text-3xl font-bold text-white dark:text-white">@totalTestCenters</h3>
                        </div>
                    </div>
                </div>
            </div>
            <div class="w-full sm:w-1/2 md:w-1/2 lg:w-1/3 xl:w-1/4 2xl:w-[32%] p-2">
                <div class="rounded-xl bg-[#39CCCC] text-white border hover:shadow-md">
                    <div class="flex justify-around items-center gap-2 text-white text-2xl font-bold mt-5">

                        <p>Total Applicants</p>
                    </div>
                    <div class="p-5">
                        <div class="my-3 p-3 items-center flex justify-center h-28">
                            <h3 class="text-3xl font-bold text-white dark:text-white">@totalApplicantsCount</h3>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="mt-5 mx-auto lg:flex justify-between">
            <div class="lg:w-[60%] xl:w-[70%]">
                <div class="rounded-xl bg-gray-100 mt-5 border hover:shadow-md">
                    <div class="flex flex-col mt-5 gap-2 text-teal-900 text-2xl font-bold mx-5">
                        <p class="text-4xl font-bold text-teal-900">Local Users</p>
                        <p class="text-lg font-semibold text-gray-600">Users from all over Pakistan</p>
                    </div>
                    <div class="flex justify-between items-center p-4">
                    </div>
                    <div class="bg-gray-100 mb-10 rounded-xl p-4">
                        <div class="relative rounded-xl overflow-hidden bg-gray-100">

                            <canvas id="myPieChart" class="w-[80%]"></canvas>

                        </div>
                    </div>
                </div>
            </div>
            <div class="lg:w-1/4 xl:w-1/4  h-75">
                <div class="shadow-2xl rounded-xl bg-gray-100 mt-5 border hover:shadow-md">
                    <div class="p-4">
                        <p class="text-2xl font-semibold text-teal-900">Latest Users</p>
                    </div>
                    <div class="flex items-center justify-between p-4">
                    </div>
                    <div class="bg-gray-100 mb-10 rounded-xl  p-4">
                        <div class="flow-root">
                            <ul class="divide-y divide-gray-200 dark:divide-gray-700">
                                @foreach (var applicant in totalApplicants)
                                {
                                    <li class="py-3 sm:py-4">
                                        <div class="flex items-center space-x-4">
                                            <div class="shrink-0">
                                                <img alt="Lana image"
                                                     class="rounded-full"
                                                     height="32"
                                                     src="~/logo.png"
                                                     width="32" />
                                            </div>
                                            <div class="min-w-0 flex-1">
                                                <p class="truncate text-sm font-medium text-gray-900 dark:text-white">
                                                    @(applicant.FirstName + " " + applicant.LastName)
                                                </p>
                                                <p class="truncate text-sm text-gray-500 dark:text-gray-400">
                                                    @applicant.Email
                                                </p>
                                            </div>
                                            <div class="inline-flex items-center text-base font-semibold text-gray-900 dark:text-white">
                                                @DateTime.Now.ToString("MMM d, yyyy")
                                            </div>
                                        </div>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>


                </div>
            </div>

        </div>

        <div class="lg:w-full xl:w-full ">
            <div class="rounded-xl bg-gray-100 mt-5 border hover:shadow-md">
                <div class="flex flex-col mt-5 gap-2 text-teal-900 text-2xl font-bold mx-5">
                    <p class="text-4xl font-bold text-teal-900">Local Users</p>
                    <p class="text-lg font-semibold text-gray-600">Users from all over Pakistan</p>
                </div>
                <div class="bg-gray-100 rounded-xl shadow-md p-6 w-full ">
                    <canvas id="myLineChart" style="width: 100%;"></canvas>
                </div>
            </div>
        </div>


    </div>
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var calendarEl = document.getElementById('calendar');

        var calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            events: function (fetchInfo, successCallback, failureCallback) {
                $.ajax({
                    url: '/Home/GetTestsData',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {



                        var events = data.TestList.map(function (testCalendar) {
                            var startDate;
                            var startTime;
                            var startDates = testCalendar.TestCalenders.$values.map(function (value) {
                                startDate = value.Date;
                                startTime = value.StartTime;
                            });
                            return {


                                title: testCalendar.TestName,
                                start: startDate + "T" + startTime,
                                classNames: ['event-badge']
                            };
                        });
                        successCallback(events);
                    },
                    error: function () {
                        failureCallback('Error fetching calendar data.');
                    }
                });
            },
            eventContent: function (info) {
                return {
                    html: `<div class="event-badge">
                                        <p class="mb-1">${info.event.title}</p>
                                        <p class="text-sm">${info.event.start.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', hour12: true })}</p>
                                    </div>`
                };
            },
            eventDidMount: function (info) {
            },
        });

        calendar.render();
    });

</script>