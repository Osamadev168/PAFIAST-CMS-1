@model List<MCQ>;
@{
    ViewData["Title"] = "Demo|Test";
}
@if (Model != null && Model.ToList().Count > 0)
{
    <form action="@Url.Action("SubmitResult")" method="post" class="form-control form-group">
        <div style="margin-left: 810px; margin-top: 100px; position: fixed;background-color: aliceblue; text-align: justify; width : 500px;font-family : monospace; font-size : 4px" class="container">
            <h1 id="test-name">Loading.....</h1>
            <h2 id="test-duration">Loading....</h2>
            <input type="submit" value="SUBMIT" class="btn btn-success" />
        </div>

        <div class="fixed-tabs">
            <div class="d-flex justify-content-end">
            </div>
           <span id="total-questions"></span> 
            <nav>
                <div class="nav nav-tabs nav-pills" id="nav-tab" role="tablist">
                    @foreach (var sectionGroup in Model.GroupBy(q => q.Section))
                    {
                        <button class="nav-link @(sectionGroup.Key == Model.First().Section ? "active" : "")" id="nav-@sectionGroup.Key-tab" data-bs-toggle="tab" data-bs-target="#nav-@sectionGroup.Key" type="button" role="tab" aria-controls="nav-@sectionGroup.Key" aria-selected="@(sectionGroup.Key == Model.First().Section ? "true" : "false")" style="font-family : 'Segoe UI'">@sectionGroup.Key/@sectionGroup.Count()</button>
                    }
                </div>
            </nav>
        </div>

        <div class="tab-content" id="nav-tabContent">
            @foreach (var sectionGroup in Model.GroupBy(q => q.Section))
            {
                <div class="tab-pane  @(sectionGroup.Key == Model.First().Section ? "show active" : "")" id="nav-@sectionGroup.Key" role="tabpanel" aria-labelledby="nav-@sectionGroup.Key-tab">
                    <br>
                    <h3>@sectionGroup.Key Section</h3>
                    <div id="section-@sectionGroup.Key" data-attempted-count="0">
                        @foreach (var (question, index) in sectionGroup.Select((question, index) => (question, index + 1)))
                        {
                            <div class="container  @(sectionGroup.Key == Model.First().Section ? "fluid" : "") border-@(sectionGroup.Key == Model.First().Section ? "4" : "2")">
                                <ol class="text-justify text-uppercase user-select-none">@index) @Html.Raw(@question.Content)</ol>
                                <div class="options form-control bg-light">
                                    <ol type="a">
                                        @Html.Raw(shuffleOptions(question.Option1, question.Option2, question.Option3, question.Option4)
                            .Aggregate("", (acc, option) => $"{acc}<li><label class='user-select-none'>{option}</label><input class='form-check-input options' type='radio' id='{question.Id}{option}' value='{option}' name='answers[{question.Id}]' onclick='saveUserResponse(this)' /></li>"))
                                    </ol>
                                </div>
                                <input type="hidden" name="answers[@question.Id]" id="answer_@question.Id" value="" />
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </form>
}
@functions
{
    public List<string> shuffleOptions(params string[] options)
    {
        var randOptions = new Random();
        return options.OrderBy(x => randOptions.Next()).ToList();
    }
}

<script src="/js/Test.js"></script>




