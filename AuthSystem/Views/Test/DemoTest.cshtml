@model List<MCQ>;
@{
    ViewData["Title"] = "Demo|Test";
    int i = 0;

}
    
<div class="container container-flex">
    @if (Model != null && Model.ToList().Count > 0)
    {
        <form action="@Url.Action("SubmitResult")" method="post">
            <input type="submit" value="Submit" classs="btn btn-primary" />
            <p id="demo">_timer</p>
            <ul class="nav nav-tabs" role="tablist">
                @{
                    foreach (var sectionGroup in Model.GroupBy(q => q.Section))
                    {
                        if (i == 0)
                        {
                            <li class="nav-item">
                                <a class="nav-link active" data-bs-toggle="tab" data-bs-target="#@sectionGroup.Key">@sectionGroup.Key</a>
                            </li>
                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="@sectionGroup.Key">
                                    <br>
                                    <p>@sectionGroup.Count()</p>
                                    <h3>@sectionGroup.Key Questions</h3>
                                    @foreach (var (question, index) in sectionGroup.Select((question, index) => (question, index + 1)))
                                    {
                                        <ol class="text-justify text-uppercase">@Html.Raw(@question.Content)</ol>
                                        <p>@index</p>
                                        <div class="options form-control input-group-text">
                                            <ol>
                                                @Html.Raw(shuffleOptions(question.Option1, question.Option2, question.Option3, question.Option4)
                            .Aggregate("", (acc, option) => $"{acc}<li><label>{option}</label><input class='form-check-input options' type='radio' id='{question.Id}{option}' value='{option}' name='answers[{question.Id}]' onclick='saveUserResponse(this)' /></li>"))
                                            </ol>
                                            <input type="hidden" name="answers[@question.Id]" id="answer_@question.Id" value="" />

                                        </div>
                                        <hr />
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link" data-bs-toggle="tab" data-bs-target="#@sectionGroup.Key">@sectionGroup.Key</a>
                            </li>
                            <div class="tab-content">
                                <div class="tab-pane fade" id="@sectionGroup.Key">
                                    <br>
                                    <p>@sectionGroup.Count()</p>
                                    <h3>@sectionGroup.Key Questions</h3>
                                    @foreach (var (question, index) in sectionGroup.Select((question, index) => (question, index + 1)))
                                    {
                                        <ol class="text-justify text-uppercase">@Html.Raw(@question.Content)</ol>
                                        <p>@index</p>
                                        <div class="options form-control input-group-text">
                                            <ol>
                                                @Html.Raw(shuffleOptions(question.Option1, question.Option2, question.Option3, question.Option4)
                            .Aggregate("", (acc, option) => $"{acc}<li><label>{option}</label><input class='form-check-input options' type='radio' id='{question.Id}{option}' value='{option}' name='answers[{question.Id}]' onclick='saveUserResponse(this)' /></li>"))
                                            </ol>
                                        </div>
                                        <input type="hidden" name="answers[@question.Id]" id="answer_@question.Id" value="" />
                                        <hr />
                                    }
                                </div>
                            </div>
                        }
                        i++;
                    }
                }
            </ul>
        </form>
    }
</div>
@functions

{

    public List<string> shuffleOptions (params string[] options)

    {
        var randOptions = new Random();
        return options.OrderBy(x => randOptions.Next()).ToList();
    }

}
<script>
    function saveUserResponse(element) {
        // Get the question ID and selected answer from the clicked radio button
        var questionId = element.name.replace("answers[", "").replace("]", "");
        var selectedAnswer = element.value;

        // Set the selected answer value to the corresponding hidden input field
        document.getElementById("answer_" + questionId).value = selectedAnswer;

        // Create a dictionary with the question ID and selected answer
        var data = {};
        data[questionId] = selectedAnswer;

        // Make an AJAX request to save the user response immediately
        fetch('/Test/SaveUserResponse', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => {
                if (response.ok) {
                    console.log('User response saved successfully!');
                } else {
                    console.error('Error saving user response:', response.statusText);
                }
            })
            .catch(error => {
                console.error('Error saving user response:', error);
            });
    }
</script>


    
