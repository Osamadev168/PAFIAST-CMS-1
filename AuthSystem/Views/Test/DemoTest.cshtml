@model List<MCQ>;
@{
    ViewData["Title"] = "Demo|Test";
    int i = 0;
}

<div class="container" id="test-section">
    @if (Model != null && Model.ToList().Count > 0)
    {
        <form action="@Url.Action("SubmitResult")" method="post" class="form-control form">
            <input type="submit" value="Submit" class="btn btn-success position-fixed" />
            <p id="demo" class="">_timer</p>
            <ul class="nav nav-tabs nav-pills" role="tablist">
                @{
                    foreach (var sectionGroup in Model.GroupBy(q => q.Section))
                    {
                        if (i == 0)
                        {
                            <li class="nav-item ">
                                <a class="nav-link active pe-auto" data-bs-toggle="tab" data-bs-target="#@sectionGroup.Key">@sectionGroup.Key</a>
                            </li>
                            <div class="tab-content">
                                <div class="tab-pane fade show active" id="@sectionGroup.Key">
                                    <br>
                                    <h3>@sectionGroup.Key Section</h3>
                                    @foreach (var (question, index) in sectionGroup.Select((question, index) => (question, index + 1)))
                                    {
                                        <div class="container-fluid border-2">
                                            <ol class="text-justify text-uppercase user-select-none">
                                           @index) @Html.Raw(@question.Content)</ol>
                                            <div class="options form-control input-group-text">
                                                <ol>
                                                    @Html.Raw(shuffleOptions(question.Option1, question.Option2, question.Option3, question.Option4)
                                .Aggregate("", (acc, option) => $"{acc}<li><label class='text-uppercase'>{option}</label><input class='form-check-input options' type='radio' id='{question.Id}{option}' value='{option}' name='answers[{question.Id}]' onclick='saveUserResponse(this)' /></li>"))
                                                </ol>
                                                <input type="hidden" name="answers[@question.Id]" id="answer_@question.Id" value="" />

                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link" data-bs-toggle="tab" data-bs-target="#@sectionGroup.Key">@sectionGroup.Key</a>
                            </li>
                            <div class="tab-content">
                                <div class="tab-pane fade" id="@sectionGroup.Key">
                                    <br>
                                    <h3>@sectionGroup.Key Section</h3>
                                    @foreach (var (question, index) in sectionGroup.Select((question, index) => (question, index + 1)))
                                    {
                                        <div class="container border-2">
                                            <ol class="text-justify text-uppercase user-select-none">@index) @Html.Raw(@question.Content)</ol>
                                            <div class="options form-control input-group-text">
                                                <ol>
                                                    @Html.Raw(shuffleOptions(question.Option1, question.Option2, question.Option3, question.Option4 )
                                .Aggregate("", (acc, option) => $"{acc}<li><label class='text-uppercase'>{option}</label><input class='form-check-input options' type='radio' id='{question.Id}{option}' value='{option}' name='answers[{question.Id}]' onclick='saveUserResponse(this)' /></li>"))
                                                </ol>
                                            </div>
                                            <input type="hidden" name="answers[@question.Id]" id="answer_@question.Id" value="" />
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        i++;
                    }
                }
            </ul>
        </form>
    }
</div>


@functions

{

    public List<string> shuffleOptions (params string[] options)

    {
        var randOptions = new Random();
        return options.OrderBy(x => randOptions.Next()).ToList();
    }

}

<script>
    

    function saveUserResponse(element) {
        var url = window.location.href;
        var testId = url.substring(url.lastIndexOf('/') + 1);
        var questionId = element.name.replace("answers[", "").replace("]", "");
        var selectedAnswer = element.value;

        document.getElementById("answer_" + questionId).value = selectedAnswer;

        var data = {};
        data[questionId] = selectedAnswer;

        fetch('/Test/SaveUserResponse?testId=' + testId, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data),
        })
            .then(response => {
                if (response.ok) {
                    console.log('User response saved successfully!');
                } else {
                    console.error('Error saving user response:', response.statusText);
                }
            })
            .catch(error => {
                console.error('Error saving user response:', error);
            });
    }

    // Function to fetch user responses on page load/refresh
    function fetchUserResponses() {
        var url = window.location.href;
        var testId = url.substring(url.lastIndexOf('/') + 1);
        console.log(testId)
        fetch('/Test/FetchUserResponses?testId=' + testId)
            .then(response => response.json())
            .then(data => {
                console.log(data);
                data.forEach(item => {
                    var questionId = item.questionId;
                    var userResponse = item.userResponse;
                    var radioId = questionId + userResponse;

                    var radioElement = document.getElementById(radioId);
                    if (radioElement) {
                        radioElement.checked = true;

                        document.getElementById("answer_" + questionId).value = userResponse;
                    } else {
                        console.error('Radio element not found:', radioId);
                    }
                });
            })
            .then(() => {
                var radioButtons = document.getElementsByClassName('options');
                for (var i = 0; i < radioButtons.length; i++) {
                    radioButtons[i].dispatchEvent(new Event('change'));
                }
            })
            .catch(error => {
                console.error('Error fetching user responses:', error);
            });
    }



    // Call the function when the page is loaded or refreshed
    window.addEventListener('load', fetchUserResponses);
</script>


    
