@model AuthSystem.Models.Test;
@{
    ViewData["Title"] = "Create Test";
}
<div class="p-4 sm:ml-64 mt-10">
    <div class="p-4 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700">
        <div class="flex items-center justify-between mb-4">
            <h2 class="text-4xl font-extrabold dark:text-white">Created tests</h2>
            <button class="px-4 py-2 bg-blue-500 text-white font-semibold rounded hover:bg-blue-600 focus:outline-none focus:ring focus:ring-blue-300">Create Test</button>
        </div>



@if (Model.TestList.Count == 0)
{
<h1>NO TESTS CREATED YET! Please wait till we add some tests :)</h1>
}
        @foreach (var test in Model.TestList)
{
    @* <div class="border border-dark rounded gap-2 d-grid p-lg-3 ">
        <h3 style="font-family : 'Lucida Sans'">@test.TestName</h3>
        <p class="text-primary display-7" style="font-family : Rockwell">Duration: @test.Duration minutes</p>
        <p class="text-primary display-7" style="font-family : Rockwell">TimeSpan: @test.TimeSpan minutes</p>
        <div style="margin:10px; border : 0.5px silver solid; border-radius : 10px; font-size : 25px; font-family : 'Segoe UI Symbol'">
            <ol>
                @if (test.TestDetails != null)

                {
                    @foreach (var detail in test.TestDetails)
                    {
                        <li>@detail.Subject.SubjectName - @detail.Percentage%</li>
                    }
                }
            </ol>
            @if (test.TestCalenders != null && test.TestCalenders.Any())
            {
                <h3>Available Calendars</h3>
                <ol>
                    @foreach (var calendar in test.TestCalenders)
                    {
                        {
                            <li>
                                Date: @calendar.Date.ToString("D")
                                - From: @calendar.StartTime.ToString("HH:mm")
                                - To: @calendar.StartTime.AddMinutes(test.Duration).ToString("HH:mm")
                                <strong>(Link will be valid from @calendar.StartTime.ToString("HH:mm") to @calendar.EndTime.ToString("HH:mm") on @calendar.Date.ToString("D"))</strong>

                            </li>
                            <p>Test Center :@calendar.TestCenter.TestCenterName</p>
                            <p>Location :@calendar.TestCenter.TestCenterLocation</p>
                            <a href="@Url.Action("DemoTest", "Test", new { id = @test.Id , C_Id = calendar.Id , C_token = calendar.CalendarToken})">Test Link</a>
                            <a class="btn btn-primary copy-button" data-test-link="@Url.Action("DemoTest", "Test", new { id = @test.Id , C_Id = calendar.Id , C_token = calendar.CalendarToken })">Copy Test Link</a>
                        }
                    }
                </ol>
            }
            else
            {
                <h6>No Calenders Added Yet!</h6>
            }
         <div id="calendars-container" class="gradient-border" >
               <h4>Create a calendar</h4>
                <form method="post" asp-action="CreateCalendar" asp-controller="Test" data-test-id="@test.Id">

                    <label>Date:</label>
                    <input type="hidden" name="testId" value="@test.Id" />
                    <input type="date" name="date" required />
                    <label>Start Time:</label>
                    <input type="time" name="startTime" required id="startTimeInput" />
                     <span id="endTime"></span>
                    <div class="form form-control" style="margin-top :20px; padding :30px">
                        <label class="control-label"> Select a Test Center</label>
                        <select class="form-control" asp-items="@ViewBag.TestCenters" name="centerId" required>
                            <option value="">Please select a test center for this calendar</option>
                        </select>
                    </div>
                    <span>@ViewBag.CalendarError</span>
                    <button type="submit" id="addCalendarBtn" class="btn btn-primary">Add Calendar</button>
                </form>
         </div>
        </div>
        <hr />
    </div> *@
}

   
        @foreach (var test in Model.TestList)
        {
                <div class="flex justify-between items-center my-5  " >
                    <div class="w-full  mx-2 bg-gray-100 border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">


                        <div class="flex justify-end px-4 pt-4">
                            <button id="dropdownButton" data-dropdown-toggle="dropdown" class="inline-block text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:ring-4 focus:outline-none focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-1.5" type="button">
                                <span class="sr-only">Open dropdown</span>
                                <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 3">
                                    <path d="M2 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm6.041 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM14 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z" />
                                </svg>
                            </button>
                            <!-- Dropdown menu -->
                            <div id="dropdown" class="z-10 hidden text-base list-none bg-white divide-y divide-gray-100 rounded-lg shadow w-44 dark:bg-gray-700">
                                <ul class="py-2" aria-labelledby="dropdownButton">
                                    <li>
                                    <button data-modal-target="defaultModal" data-modal-toggle="defaultModal" class="block w-full text-blue-700 bg-white hover:bg-blue-800 hover:text-white focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button">
                                        Add Calendar
                                    </button>
                                    </li>

                                </ul>
                            </div>
                        </div>
                        <div class="flex flex-col items-center pb-10">


                        <h2 class="text-4xl font-bold dark:text-white mb-4"> @test.TestName</h2>

                        <div class="flex justify-between items-center">
                            <div class="flex items-center space-x-10">

                                <div class="flex items-center justify-between bg-blue-100 p-3 rounded border border-blue-500">
                                    <div class="flex items-center space-x-2">
                                       
                                        <span class="text-blue-800 font-semibold">Test Duration:</span>
                                        <span class="text-blue-800">@test.Duration hrs</span>
                                    </div>
                                </div>

                                <div class="flex items-center justify-between bg-blue-100 p-3 rounded border border-blue-500">
                                <div class="flex items-center space-x-2"> 
                                    <span class="text-blue-800 font-medium">Test TimeSpan:</span>
                                    <span class="text-blue-800"> @test.TimeSpan  hrs</span>
                                </div>
                                </div>
                            </div>
                            </div>
                            
                        </div>
                            <div class="flex flex-wrap gap-2 mt-5 justify-center items-center ">
                                @if (test.TestDetails != null)
                                {

                                    @foreach (var detail in test.TestDetails)
                                    {
                                <div class="flex items-center justify-between bg-yellow-100 p-3 rounded border border-yellow-500">
                                    <div class="flex items-center space-x-2">
                                        
                                        <span class="text-yellow-800 font-semibold">@detail.Subject.SubjectName:</span>
                                        <span class="text-yellow-800">@detail.Percentage%</span>
                                    </div>
                                </div>

                                    }
                                }
                            </div>
                    
                    <div class="flex flex-col items-center mt-4 space-y-3">
                        <!-- Available calendars section starts here -->
                            @if (test.TestCalenders != null && test.TestCalenders.Any()){
                        <h6 class="text-sm font-medium text-gray-600 dark:text-gray-300">Available Calendars:</h6>
                         
                        @foreach (var calendar in test.TestCalenders)
                                {

                                    {
                                        
                                        <div id="accordion-collapse" data-accordion="collapse">
                                            <h2 id="accordion-collapse-heading-@calendar.Id" >
                                                <button type="button" class="flex gap-40 mb-10 items-center justify-between w-full p-5 font-medium text-left text-gray-500 border border-b-0 border-gray-200 rounded-t-xl focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800 dark:border-gray-700 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800" data-accordion-target="#accordion-collapse-body-@calendar.Id" aria-expanded="false" aria-controls="accordion-collapse-body-@calendar.Id">
                                                    <span class="mx-10">Calender @calendar.Id of @test.TestName</span>
                                                    <svg data-accordion-icon class="w-3 h-3 rotate-180 shrink-0" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6">
                                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5" />
                                                    </svg>
                                                </button>
                                            </h2>
                                        <div id="accordion-collapse-body-@calendar.Id" class="hidden w-full mb-4 p-4 bg-gray-100 rounded-lg border border-gray-300 dark:bg-gray-800 dark:border-gray-700">
                                            <div class="flex flex-col space-y-2">
                                                <p class="text-sm font-medium text-gray-600">
                                                    <span>Date:</span> @calendar.Date.ToString("D") - From: @calendar.StartTime.ToString("HH:mm") - To: @calendar.StartTime.AddMinutes(test.Duration).ToString("HH:mm")
                                                </p>
                                                <p class="text-sm">
                                                    <strong class="text-gray-600">Link valid from </strong>
                                                    <span class="bg-yellow-200 text-yellow-800 font-semibold">
                                                        @calendar.StartTime.ToString("HH:mm") to @calendar.EndTime.ToString("HH:mm") on @calendar.Date.ToString("D")
                                                    </span>
                                                </p>
                                                <p class="text-sm">Test Center: <span class="text-blue-600">@calendar.TestCenter.TestCenterName</span></p>
                                                <p class="text-sm">Location: @calendar.TestCenter.TestCenterLocation</p>
                                                <a href="@Url.Action("DemoTest", "Test", new { id = @test.Id , C_Id = calendar.Id , C_token = calendar.CalendarToken})" class="text-blue-600 hover:underline">Test Link</a>
                                                <button class="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-lg shadow-md transition duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-50 copy-button" data-test-link="@Url.Action("DemoTest", "Test", new { id = @test.Id , C_Id = calendar.Id , C_token = calendar.CalendarToken })">
                                                    Copy Test Link
                                                </button>

                                            </div>
                                        </div>


                                
                                        </div>
                                        
                                    }
                                }
                            
                            <!-- Available calendars section ends here -->
                            }
                    </div>
                    
                
            </div>
            </div>
            
            <div id="defaultModal" tabindex="-1" aria-hidden="true" class="fixed top-0 left-0 right-0 z-50 hidden w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
                <div class="relative w-full max-w-2xl max-h-full">
                    <!-- Modal content -->
                    <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
                        <!-- Modal header -->
                        <div class="flex items-start justify-between p-4 border-b rounded-t dark:border-gray-600">
                            <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                                Add Calendar
                            </h3>
                            <button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ml-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-hide="defaultModal">
                                <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                                </svg>
                                <span class="sr-only">Close modal</span>
                            </button>
                        </div>
                        <!-- Modal body -->
                        <div class="p-6 space-y-6">
                            <div id="calendars-container" class="border border-gray-300 rounded-lg p-6 shadow-md">
                                <form method="post" asp-action="CreateCalendar" asp-controller="Test" data-test-id="@test.Id">

                                     @* <label class="block text-sm font-medium text-gray-700">Date:</label> *@
                                    <input type="hidden" name="testId" value="@test.Id" /> 
                                    @* <input type="date" name="date" required class="mt-1 p-2 border rounded-md focus:ring focus:ring-blue-200 focus:border-blue-400" /> *@
                                    <div class="relative mb-3"
                                         data-te-datepicker-init
                                         data-te-inline="true"
                                         data-te-input-wrapper-init>
                                        <input type="text" name="date" required
                                               class="peer block min-h-[auto] w-full rounded border-0 bg-transparent px-3 py-[0.32rem] leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
                                               placeholder="Select a date" />
                                        <label for="floatingInput"
                                               class="pointer-events-none absolute left-3 top-0 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-neutral-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-neutral-200 dark:peer-focus:text-primary">Select a date</label>
                                    </div>
                                   
                                    @* <input type="time" name="startTime" required id="startTimeInput" class="mt-1 p-2 border rounded-md focus:ring focus:ring-blue-200 focus:border-blue-400" />
                                    <span id="endTime" class="text-gray-500"></span> *@
                                    <div class="relative"
                                         id="timepicker-with-icon"
                                         data-te-timepicker-init
                                         data-te-input-wrapper-init>
                                        <input type="text" name="startTime" required id="startTimeInput"
                                               class="peer block min-h-[auto] w-full rounded border-0 bg-transparent px-3 py-[0.32rem] leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
                                                />
                                        <label for="startTimeInput"
                                               class="pointer-events-none absolute left-3 top-0 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-neutral-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-neutral-200 dark:peer-focus:text-primary">Select a time</label>
                                        <span class="absolute right-1.5 top-1/2 ml-auto h-4 w-4 -translate-x-1/2 -translate-y-1/2 cursor-pointer border-none bg-transparent text-neutral-700 outline-none transition-all duration-[300ms] ease-[cubic-bezier(0.25,0.1,0.25,1)] hover:text-[#3b71ca] focus:text-[#3b71ca] dark:text-white dark:hover:text-[#3b71ca] dark:focus:text-[#3b71ca]"
                                              tabindex="0"
                                              type="button"
                                              role="button"
                                              data-te-toggle="timepicker-with-icon"
                                              data-te-timepicker-toggle-button
                                              data-te-timepicker-icon>
                                            <svg xmlns="http://www.w3.org/2000/svg"
                                                 fill="none"
                                                 viewBox="0 0 24 24"
                                                 stroke-width="1.5"
                                                 stroke="currentColor"
                                                 class="h-5 w-5">
                                                <path stroke-linecap="round"
                                                      stroke-linejoin="round"
                                                      d="M4.5 12.75l7.5-7.5 7.5 7.5m-15 6l7.5-7.5 7.5 7.5" />
                                            </svg>
                                        </span>
                                    </div>

                                    @* <div class="mt-4">
                                        <label class="block text-sm font-medium text-gray-700">Select a Test Center</label>
                                        <select class="block w-full p-2 border rounded-md focus:ring focus:ring-blue-200 focus:border-blue-400" asp-items="@ViewBag.TestCenters" name="centerId" required>
                                            <option value="">Please select a test center for this calendar</option>
                                        </select>
                                    </div> *@
                                    <div class="my-4">
                                        <select data-te-select-init data-te-select-filter="true" class="flex items-center" asp-items="@ViewBag.TestCenters" name="centerId" required>
                                        <option value="">Please select a test center for this calendar</option>
                                       
                                    </select>
                                    </div>

                                    <span class="text-red-600">@ViewBag.CalendarError</span>

                                    <div class="flex items-center p-6 space-x-2 border-t border-gray-200 rounded-b dark:border-gray-600">
                                        <button data-modal-hide="defaultModal" type="submit" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                                        
                                        >Add</button>
                                        <button data-modal-hide="defaultModal" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600 dark:focus:ring-gray-600">Cancel</button>
                                    </div>
                                </form>
                            </div>

                        </div>
                        <!-- Modal footer -->
                       
                    </div>
                </div>
            </div>
        }
        </div>
    </div>

<script>
    import {
        Input,
        Timepicker,
        Select,
        Datepicker,
        initTE,
    } from "tw-elements";

    initTE({ Input, Timepicker,Select,Datepicker});

    function copyTestLink(event) {
        var testLink = event.target.dataset.testLink;
        navigator.clipboard.writeText("http://localhost:5173" + testLink)
            .then(function () {
                alert("Test link copied to clipboard!");
            })
            .catch(function (error) {
                console.error("Failed to copy test link: ", error);
            });
    }
    var copyButtons = document.querySelectorAll(".copy-button");
    copyButtons.forEach(function (button) {
        button.addEventListener("click", function (event) {
            event.preventDefault();
            copyTestLink(event);
        });
    });
    var calendarForms = document.querySelectorAll('#calendars-container form');
    calendarForms.forEach(function (form) {
        var startTimeInput = form.querySelector('input[name="startTime"]');
        var testIdInput = form.querySelector('input[name="testId"]');
        var endTimeElement = form.querySelector('#endTime');

        startTimeInput.addEventListener('input', function () {
            var testId = testIdInput.value;
            var startTime = startTimeInput.value;
            fetch(`/Test/GetTestEndTime?testId=${testId}&startTime=${startTime}`)
                .then(function (response) {
                    return response.text();
                })
                .then(function (data) {
                    endTimeElement.innerHTML = "The end time for this calendar will be " + "<strong>" + data + "</strong>";
                })
                .catch(function (error) {
                    console.error(error);
                });
        });
    });
</script>
