@model AuthSystem.Models.Test;
@{
    ViewData["Title"] = "Create Test";
}
<div class="p-4 sm:ml-64 mt-10">
    <div class="p-4 border-2 border-gray-200 border-dashed rounded-lg dark:border-gray-700">
<h2>Created Tests</h2>
<hr />
@if (Model.TestList.Count == 0)
{
<h1>NO TESTS CREATED YET! Please wait till we add some tests :)</h1>
}
@foreach (var test in Model.TestList)
{
    <div class="border border-dark rounded gap-2 d-grid p-lg-3 ">
        <h3 style="font-family : 'Lucida Sans'">@test.TestName</h3>
        <p class="text-primary display-7" style="font-family : Rockwell">Duration: @test.Duration minutes</p>
        <p class="text-primary display-7" style="font-family : Rockwell">TimeSpan: @test.TimeSpan minutes</p>
        <div style="margin:10px; border : 0.5px silver solid; border-radius : 10px; font-size : 25px; font-family : 'Segoe UI Symbol'">
            <ol>
                @if (test.TestDetails != null)

                {
                    @foreach (var detail in test.TestDetails)
                    {
                        <li>@detail.Subject.SubjectName - @detail.Percentage%</li>
                    }
                }
            </ol>
            @if (test.TestCalenders != null && test.TestCalenders.Any())
            {
                <h3>Available Calendars</h3>
                <ol>
                    @foreach (var calendar in test.TestCalenders)
                    {
                        {
                            <li>
                                Date: @calendar.Date.ToString("D")
                                - From: @calendar.StartTime.ToString("HH:mm")
                                - To: @calendar.StartTime.AddMinutes(test.Duration).ToString("HH:mm")
                                <strong>(Link will be valid from @calendar.StartTime.ToString("HH:mm") to @calendar.EndTime.ToString("HH:mm") on @calendar.Date.ToString("D"))</strong>

                            </li>
                            <p>Test Center :@calendar.TestCenter.TestCenterName</p>
                            <p>Location :@calendar.TestCenter.TestCenterLocation</p>
                            <a href="@Url.Action("DemoTest", "Test", new { id = @test.Id , C_Id = calendar.Id , C_token = calendar.CalendarToken})">Test Link</a>
                            <a class="btn btn-primary copy-button" data-test-link="@Url.Action("DemoTest", "Test", new { id = @test.Id , C_Id = calendar.Id , C_token = calendar.CalendarToken })">Copy Test Link</a>
                        }
                    }
                </ol>
            }
            else
            {
                <h6>No Calenders Added Yet!</h6>
            }
         <div id="calendars-container" class="gradient-border" >
               <h4>Create a calendar</h4>
                <form method="post" asp-action="CreateCalendar" asp-controller="Test" data-test-id="@test.Id">

                    <label>Date:</label>
                    <input type="hidden" name="testId" value="@test.Id" />
                    <input type="date" name="date" required />
                    <label>Start Time:</label>
                    <input type="time" name="startTime" required id="startTimeInput" />
                     <span id="endTime"></span>
                    <div class="form form-control" style="margin-top :20px; padding :30px">
                        <label class="control-label"> Select a Test Center</label>
                        <select class="form-control" asp-items="@ViewBag.TestCenters" name="centerId" required>
                            <option value="">Please select a test center for this calendar</option>
                        </select>
                    </div>
                    <span>@ViewBag.CalendarError</span>
                    <button type="submit" id="addCalendarBtn" class="btn btn-primary">Add Calendar</button>
                </form>
         </div>
        </div>
        <hr />
    </div>
}
</div>
</div>
<script>

    function copyTestLink(event) {
        var testLink = event.target.dataset.testLink;
        navigator.clipboard.writeText("http://localhost:5173" + testLink)
            .then(function () {
                alert("Test link copied to clipboard!");
            })
            .catch(function (error) {
                console.error("Failed to copy test link: ", error);
            });
    }
    var copyButtons = document.querySelectorAll(".copy-button");
    copyButtons.forEach(function (button) {
        button.addEventListener("click", function (event) {
            event.preventDefault();
            copyTestLink(event);
        });
    });
    var calendarForms = document.querySelectorAll('#calendars-container form');
    calendarForms.forEach(function (form) {
        var startTimeInput = form.querySelector('input[name="startTime"]');
        var testIdInput = form.querySelector('input[name="testId"]');
        var endTimeElement = form.querySelector('#endTime');

        startTimeInput.addEventListener('input', function () {
            var testId = testIdInput.value;
            var startTime = startTimeInput.value;
            fetch(`/Test/GetTestEndTime?testId=${testId}&startTime=${startTime}`)
                .then(function (response) {
                    return response.text();
                })
                .then(function (data) {
                    endTimeElement.innerHTML = "The end time for this calendar will be " + "<strong>" + data + "</strong>";
                })
                .catch(function (error) {
                    console.error(error);
                });
        });
    });
</script>
